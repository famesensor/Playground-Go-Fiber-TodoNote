// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/famesensor/playground-go-fiber-todonotes/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, todo
func (_m *TodoRepository) Create(ctx context.Context, todo *domain.Todo) error {
	ret := _m.Called(ctx, todo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Todo) error); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *TodoRepository) FindAll(ctx context.Context) ([]*domain.Todo, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.Todo
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Todo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *TodoRepository) FindById(ctx context.Context, id string) (*domain.Todo, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Todo
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, id
func (_m *TodoRepository) UpdateStatus(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTodo provides a mock function with given fields: ctx, id, todo
func (_m *TodoRepository) UpdateTodo(ctx context.Context, id string, todo *domain.Todo) error {
	ret := _m.Called(ctx, id, todo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Todo) error); ok {
		r0 = rf(ctx, id, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
